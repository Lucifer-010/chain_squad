# Generated by Django 4.2.16 on 2025-10-29 21:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='OrbitChain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('rpc_url', models.URLField(help_text='The unique RPC URL of the Orbit L3 chain.', max_length=500, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orbit_chains', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='NotificationChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A friendly name for the channel, e.g., 'My Team Discord'", max_length=100)),
                ('channel_type', models.CharField(choices=[('discord', 'Discord'), ('telegram', 'Telegram'), ('webhook', 'Webhook')], max_length=50)),
                ('webhook_url', models.URLField(help_text='The webhook URL to send notifications to.', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_channels', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_to_monitor', models.CharField(choices=[('sequencer_balance', 'Sequencer Balance'), ('chain_uptime_status', 'Chain Uptime')], max_length=100)),
                ('condition', models.CharField(choices=[('lt', 'Is Less Than'), ('gt', 'Is Greater Than'), ('eq', 'Is Equal To')], max_length=10)),
                ('threshold_value', models.DecimalField(decimal_places=18, help_text='The critical value for the metric.', max_digits=36)),
                ('is_active', models.BooleanField(default=True, help_text='Enable or disable this alert rule.')),
                ('is_triggered', models.BooleanField(default=False, help_text='Indicates if the alert is currently in a triggered state.')),
                ('last_triggered_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_rules', to='Monitor_app.orbitchain')),
                ('notification_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='Monitor_app.notificationchannel')),
            ],
        ),
        migrations.CreateModel(
            name='HealthMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('chain_uptime_status', models.BooleanField(default=False, help_text="Is the chain's RPC endpoint responding?")),
                ('sequencer_balance', models.DecimalField(blank=True, decimal_places=18, help_text='The ETH balance of the L3 sequencer.', max_digits=36, null=True)),
                ('last_batch_posted_timestamp', models.DateTimeField(blank=True, help_text='The timestamp of the last batch posted to the L2.', null=True)),
                ('chain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_metrics', to='Monitor_app.orbitchain')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['chain', '-timestamp'], name='Monitor_app_chain_i_97b9dc_idx')],
            },
        ),
    ]
